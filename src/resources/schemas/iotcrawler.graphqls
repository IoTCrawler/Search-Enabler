scalar Object
#scalar Date

schema {
    query: Query

}

directive @resource(class : String, subClassOf : [String]) on OBJECT | INPUT_OBJECT
directive @attribute(uri : String!) on FIELD_DEFINITION

input SystemInput {
     id: String
     label: String
     location: String
     isHostedBy: PlatformInput
     alternativeType: String
}

input IoTStreamInput{
     id: String
     label: String
     generatedBy: SensorInput
     observes: ObservablePropertyInput
     alternativeType: String
 }

input SensorInput{
     id: String
     label: String
     location: String
     isHostedBy: PlatformInput
     observes: ObservablePropertyInput
     madeObservation: StreamObservationInput
     alternativeType: String
 }

input PlatformInput {
    id: String
    label: String
    hosts: SensorInput
    location: String
    alternativeType: String
}

input ObservablePropertyInput {
    id: String
    label: String
    isObservedBy: SensorInput
    alternativeType: String
}

input StreamObservationInput {
    id: String
    belongsTo: IoTStreamInput
    madeBySensor: SensorInput
    alternativeType: String
    hasSimpleResult: SimpleResultFilter
}

input RankingCriteria {
    name: String
    value: Float
}


input SimpleResultFilter {
      eq: Int
      neq: Int
      gt: Int
      gte: Int
      lt: Int
      lte: Int
}


type Query {
    streams(id: String, alternativeType: String, ranking: [RankingCriteria], label: String, generatedBy: SensorInput, offset: Int = 0, limit: Int = 0): [IoTStream]
    sensors(id: String, alternativeType: String, label: String, madeObservation: StreamObservationInput, isHostedBy: PlatformInput, observes: ObservablePropertyInput, offset: Int = 0, limit: Int = 0): [Sensor]
    systems(id: String, alternativeType: String, label: String, isHostedBy: PlatformInput, offset: Int = 0, limit: Int = 0): [System]
    platforms(id: String,  alternativeType: String, label: String, hosts: SensorInput, offset: Int = 0, limit: Int = 0): [Platform]
    observableProperties(id: String,  alternativeType: String, label: String, offset: Int = 0, limit: Int = 0): [ObservableProperty]
    streamObservations(id: String, hasSimpleResult: SimpleResultFilter, alternativeType: String, madeBySensor: SensorInput, belongsTo: IoTStreamInput, offset: Int = 0, limit: Int = 0): [StreamObservation]

}


type IoTStream @resource(class : "http://purl.org/iot/ontology/iot-stream#IotStream"){
    id: String!
    type: String!
    generatedBy: Sensor @attribute(uri : "http://purl.org/iot/ontology/iot-stream#generatedBy")
    observes: ObservableProperty @attribute(uri : "http://purl.org/iot/ontology/iot-stream#observes")
    alternativeType: String  @attribute(uri : "http://www.agtinternational.com/ontologies/ngsi-ld#alternativeType")
}

type System @resource(class : "http://www.w3.org/ns/ssn/System"){
    id: String!
    type: String!
    label: String   @attribute(uri : "http://www.w3.org/2000/01/rdf-schema#label")
    isHostedBy: Platform    @attribute(uri : "http://www.w3.org/ns/sosa/isHostedBy")

}

type Sensor @resource(class : "http://www.w3.org/ns/sosa/Sensor", subClassOf: ["System"]){
    madeObservation: StreamObservation  @attribute(uri : "http://www.w3.org/ns/sosa/madeObservation")
    observes: ObservableProperty    @attribute(uri : "http://www.w3.org/ns/sosa/observes")
    alternativeType: String  @attribute(uri : "http://www.agtinternational.com/ontologies/ngsi-ld#alternativeType")
    location: String   @attribute(uri : "http://www.agtinternational.com/ontologies/devices/locations")
}

type Actuator @resource(class : "http://www.w3.org/ns/sosa/Actuator", subClassOf: ["System"]){

 }

type Platform @resource(class : "http://www.w3.org/ns/sosa/Platform"){
    id: String!
    type: String!
    label: String   @attribute(uri : "http://www.w3.org/2000/01/rdf-schema#label")
    hosts: [Sensor] @attribute(uri : "http://www.w3.org/ns/sosa/hosts")
    location: String
    alternativeType: String  @attribute(uri : "http://www.agtinternational.com/ontologies/ngsi-ld#alternativeType")
}

type ObservableProperty @resource(class : "http://www.w3.org/ns/sosa/ObservableProperty"){
    id: String!
    type: String!
    label: String   @attribute(uri : "http://www.w3.org/2000/01/rdf-schema#label")
    isObservedBy: [Sensor]  @attribute(uri : "http://www.w3.org/ns/sosa/isObservedBy")
    alternativeType: String  @attribute(uri : "http://www.agtinternational.com/ontologies/ngsi-ld#alternativeType")
}

type StreamObservation @resource(class : "http://purl.org/iot/ontology/iot-stream#StreamObservation"){
    id: String!
    type: String!
    madeBySensor: Sensor    @attribute(uri : "http://www.w3.org/ns/sosa/madeBySensor")
    belongsTo: IoTStream    @attribute(uri : "http://purl.org/iot/ontology/iot-stream#belongsTo")
    alternativeType: String  @attribute(uri : "http://www.agtinternational.com/ontologies/ngsi-ld#alternativeType")
    hasSimpleResult: Object  @attribute(uri : "http://www.w3.org/ns/sosa/hasSimpleResult")
    resultTime: String   @attribute(uri : "http://www.w3.org/ns/sosa/resultTime")
}

#type Event @resource(class : "http://purl.org/iot/ontology/iot-stream#Event"){
#    id: String!
#    type: String!
#    label: String!   @attribute(uri : "http://www.w3.org/2000/01/rdf-schema#label")
#    windowStart: Date  @attribute(uri : "http://purl.org/iot/ontology/iot-stream#windowStart")
#    windowEnd: Date    @attribute(uri : "http://purl.org/iot/ontology/iot-stream#windowEnd")
#}